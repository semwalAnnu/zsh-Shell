#include "execute.h"
#include "msgs.h"
#include <errno.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
void print_cwd() {

  char cwd[1024];

  if (getcwd(cwd, sizeof(cwd)) != NULL) {

    write(STDOUT_FILENO, cwd, strlen(cwd));
    write(STDOUT_FILENO, "$ ", 2);
  } else {
    write(STDERR_FILENO, "shell: unable to get current directory\n", 39);
  }
}

void handle_sigint(int signum) {
  const char *msg = FORMAT_MSG("\nhelp", HELP_HELP_MSG);
  write(STDOUT_FILENO, msg, strlen(msg));
  // write(STDOUT_FILENO, "\n", 1);
  print_cwd();
}

void registerSignal() {
  struct sigaction act;
  act.sa_handler = handle_sigint;
  act.sa_flags = 0;
  sigemptyset(&act.sa_mask);

  int ret = sigaction(SIGINT, &act, NULL);
  if (ret == -1) {
    perror("FAILED SIGACTION()");
    exit(EXIT_FAILURE);
  }
}

int main() {

  char input[1024];
  registerSignal();
  while (1) {
    print_cwd();
    ssize_t size = read(STDIN_FILENO, input, 1024);

    if (size <= 0) {
      write(STDERR_FILENO, "shell: unable to read command\n", 30);
      exit(EXIT_FAILURE);
    }
    input[size - 1] = '\0'; //
    execute(input);
    clean_zombies();
  }

  return 0;
}
